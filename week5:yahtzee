"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set


def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    scores12=[]
    maxval=max(hand)
    
    handlist=list(hand)
    
    
    for idx2 in range(1,maxval+1):
    
        
        scores12.append(handlist.count(idx2)*(idx2))
  
    return max(scores12)

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value of the held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    outcomes=[]
    count=1
    while count<=num_die_sides:
        
        outcomes.append(count)
        count=count+1
    
    helddice=list(held_dice)
    
    ans_set=gen_all_sequences(outcomes,num_free_dice)
    
    listset=list(ans_set)
    
    
    length=len(listset)
    
    total=0
    for item in listset:
        helddicefake=helddice
        item1=list(item)
       
        helddicefake=helddicefake+item1
        
        maxscore=score(tuple(helddicefake))
        total+=maxscore
    expected_value1=total/float(length)
    return expected_value1


def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    answer_set=set([()])
    
    for item in list(hand):
        temp_set=set()
        for pseq in answer_set:
            for bnr in [0,1]:
            
                if bnr:
                    newseq=list(pseq)
                    newseq.append(item)
                    temp_set.add(tuple(newseq))
                    
                else:
                    asd=[]
                    asd.append(item)
                    temp_set.add(tuple(asd))
                    
        answer_set.update(temp_set)
    return answer_set
        
    
    
    
    
def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    print hand , num_die_sides
    hold_sets=gen_all_holds(hand)
    length1=len(hand)
    #print hold_sets
    max_value=0
    for item in hold_sets:
        length2=len(item)
        scores=expected_value(item,num_die_sides,length1-length2)
        if scores>max_value:
            max_value=scores
            hold_dice=item
    return max_value, hold_dice


def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (5, 5, 5, 6, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
#run_example()
#import user35_mGREPnDxbs_0 as strategy_testsuite
#strategy_testsuite.run_suite(strategy)
#strategy((3,3,3,3),4)
#score((1,2,3,4,4))

#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
                                       
    
    
    



