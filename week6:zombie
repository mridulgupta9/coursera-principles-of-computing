"""
Student portion of Zombie Apocalypse mini-project
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = "obstacle"
HUMAN = "human"
ZOMBIE = "zombie"


class Zombie(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        if obstacle_list != None:
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._human_list=[]
        self._zombie_list=[]
        
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row,col))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)      
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        # replace with an actual generator
        for zombie in self._zombie_list:
            yield zombie

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row,col))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        # replace with an actual generator
        for human in self._human_list:
            yield human
        
    def compute_distance_field(self, entity_type):
        """
        Function computes a 2D distance field
        Distance at member of entity_queue is zero
        Shortest paths avoid obstacles and use distance_type distances
        """
        height=poc_grid.Grid.get_grid_height(self)
        width=poc_grid.Grid.get_grid_width(self)
        visited=poc_grid.Grid(height,width)
        count=0
        distance_field=[]
        while count<height:
            distance_field.append([height*width]*width)
            count=count+1
        boundary=poc_queue.Queue()
        if entity_type==ZOMBIE:
            for element in self._zombie_list:
                boundary.enqueue(element)
        elif entity_type==HUMAN:
            for element in self._human_list:
                boundary.enqueue(element)
            
        for cells in boundary:
            poc_grid.Grid.set_full(visited,cells[0],cells[1])
            distance_field[cells[0]][cells[1]]=0
        for current_cells in boundary:
            
            if entity_type==ZOMBIE:
                neighbours=poc_grid.Grid.four_neighbors(self,current_cells[0],current_cells[1])
            elif entity_type==HUMAN:
                neighbours=poc_grid.Grid.four_neighbors(self,current_cells[0],current_cells[1])
                
            for neighbour in neighbours:
                if poc_grid.Grid.is_empty(visited,neighbour[0],neighbour[1]) and poc_grid.Grid.is_empty(self,neighbour[0],neighbour[1]):
                    poc_grid.Grid.set_full(visited,neighbour[0],neighbour[1])
                    boundary.enqueue(neighbour)
                    
                    distance_field[neighbour[0]][neighbour[1]]= min(distance_field[neighbour[0]][neighbour[1]],distance_field[current_cells[0]][current_cells[1]] + 1) 
            
            
        return distance_field        
            
        
    def move_humans(self, zombie_distance):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """
        for count in range(0,len(self._human_list)):
            item=self._human_list[count]
            #print item
            neighbours=poc_grid.Grid.eight_neighbors(self,item[0],item[1])
            distance=zombie_distance[item[0]][item[1]]
            #print neighbours
            for neighbour in neighbours:
                if zombie_distance[neighbour[0]][neighbour[1]]>distance:
                    distance=zombie_distance[neighbour[0]][neighbour[1]]
                    self._human_list[count]=(neighbour[0],neighbour[1])
        #print self._human_list            
    
    def move_zombies(self, human_distance):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        for count in range(0,len(self._zombie_list)):
            item=self._zombie_list[count]
            neighbours=poc_grid.Grid.four_neighbors(self,item[0],item[1])
            distance=human_distance[item[0]][item[1]]
            for neighbour in neighbours:
                if human_distance[neighbour[0]][neighbour[1]]<distance:
                    distance=human_distance[neighbour[0]][neighbour[1]]
                    self._zombie_list[count]=(neighbour[0],neighbour[1])

# Start up gui for simulation - You will need to write some code above
# before this will work without errors

#poc_zombie_gui.run_gui(Zombie(30, 40))


